package com.tdd.refactoring.example.test;

import static org.junit.Assert.*;
import java.util.List;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.tdd.refactoring.example.BookShelfRefactoringExample5;

public class BookShelfRefactoringExampleTest5 {

	@Test
	public void emptyBookShelfWhenNoBookAdded() {
		BookShelfRefactoringExample5 shelf = new BookShelfRefactoringExample5();
		List<String> books = shelf.selectBooks();
		assertTrue("BookShelf should be empty.", books.isEmpty());
	}

	@Test
	public void bookshelfContainsTwoBooksWhenTwoBooksAdded() {
		BookShelfRefactoringExample5 shelf = new BookShelfRefactoringExample5();
		shelf.add("Effective Java", "Code Complete");
		List<String> books = shelf.selectBooks();
		assertEquals("BookShelf should have two books.", 2, books.size());
	}

	/*
	 * Method that tests the scenario where we call the add method without passing
	 * any book. We expect that we should get an empty bookshelf
	 */
	@Test
	public void emptyBookShelfWhenAddIsCalledWithoutBooks() {
		BookShelfRefactoringExample5 shelf = new BookShelfRefactoringExample5();
		shelf.add();
		List<String> books = shelf.selectBooks();
		assertTrue("BookShelf should be empty.", books.isEmpty());
	}

	/*
	 * Method tests that the client of BookShelf canâ€™t modify the books collection
	 * returned by the books method
	 */
	@Test
	public void booksReturnedFromBookShelfIsImmutableForClient() {
		BookShelfRefactoringExample5 shelf = new BookShelfRefactoringExample5();
		shelf.add("Effective Java", "Code Complete");
		List<String> books = shelf.selectBooks();
		try {
			books.add("The Mythical Man-Month");
			fail("Should not be able to add book to books");
		} catch (Exception e) {
			assertTrue("Should throw UnsupportedOperationException.", e instanceof UnsupportedOperationException);
		}
	}
}
